# Rspec 第二步（rspec expectations)

  RSpec::Expectations 让你能够在测试example中表达你所期望得到的对象

## 安装

## 基本用法

eg:
  describe Order do
    it "sums the prices of the items in its line items" do
      order = Order.new
      order.add_entry(LineItem.new(:item => Item.new(
        :price => Money.new(1.11, :USD)
      )))
      order.add_entry(LineItem.new(:item => Item.new(
        :price => Money.new(2.22, :USD),
        :quantity => 2
      )))
      expect(order.total).to eq(Money.new(5.55, :USD))
    end
  end

  If order.total == Money.new(5.55, :USD) then the example passes, If not

  expected: #<Money @value=5.55 @currency=:USD>
       got: #<Money @value=1.11 @currency=:USD>

## 内建 matchers

eg:

  actual.should eq(expected)  # passes if actual == expected
  actual.should == expected   # passes if actual == expected
  actual.should eql(expected) # passes if actual.eql?(expected)

  actual.should be(expected)    # passes if actual.equal?(expected)
  actual.should equal(expected) # passes if actual.equal?(expected)

  actual.should be >  expected
  actual.should be >= expected
  actual.should be <= expected
  actual.should be <  expected
  actual.should be_within(delta).of(expected)

  actual.should match(/expression/)
  actual.should =~ /expression/

  actual.should be_an_instance_of(expected)
  actual.should be_a_kind_of(expected)

  actual.should be_true  # passes if actual is truthy (not nil or false)
  actual.should be_false # passes if actual is falsy (nil or false)
  actual.should be_nil   # passes if actual is nil

  expect { ... }.to raise_error
  expect { ... }.to raise_error(ErrorClass)
  expect { ... }.to raise_error("message")
  expect { ... }.to raise_error(ErrorClass, "message")

  expect { ... }.to throw_symbol
  expect { ... }.to throw_symbol(:symbol)
  expect { ... }.to throw_symbol(:symbol, 'value')

  expect { |b| 5.tap(&b) }.to yield_control # passes regardless of yielded args
  expect { |b| yield_if_true(true, &b) }.to yield_with_no_args # passes only if no args are yielded
  expect { |b| 5.tap(&b) }.to yield_with_args(5)
  expect { |b| 5.tap(&b) }.to yield_with_args(Fixnum)
  expect { |b| "a string".tap(&b) }.to yield_with_args(/str/)
  expect { |b| [1, 2, 3].each(&b) }.to yield_successive_args(1, 2, 3)
  expect { |b| { :a => 1, :b => 2 }.each(&b) }.to yield_successive_args([:a, 1], [:b, 2])

  actual.should be_xxx         # passes if actual.xxx?
  actual.should have_xxx(:arg) # passes if actual.has_xxx?(:arg)

  (1..10).should cover(3)

  actual.should include(expected)
  actual.should start_with(expected)
  actual.should end_with(expected)

## 配置语法
  RSpec.configure do |config|
    config.expect_with :rspec do |c|
      c.syntax = :expect
      # or
      c.syntax = :should
      # or
      c.syntax = [:should, :expect]
    end
  end

## 一个语法
  做了这样的配置：config.syntax = :expect

eg:
  describe User do
    it { should validate_presence_of :email }
  end
